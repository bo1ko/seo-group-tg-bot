import asyncio
import os

from aiogram import Router, types, F, Bot
from aiogram.filters import Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

import app.database.orm_query as rq
import app.keyboards.admin_keyboard as kb
from app.bots.authorization import TelegramLogin
from app.bots.chat_joiner import ChatJoiner
from app.bots.check_message import CheckMessage
from app.filters.check_admin import IsAdmin

load_dotenv()

router = Router()
router.message.filter(IsAdmin())

add_chats_task = None
check_chats_task = None

login_manager = None

auth_in_progress = False
add_chats_in_progress = False
check_chats_in_progress = False


class Auth(StatesGroup):
    waiting_for_api_id = State()
    waiting_for_api_hash = State()
    waiting_for_phone_number = State()
    waiting_for_code = State()


class ExcelFile(StatesGroup):
    file_name = State()


class KeywordsState(StatesGroup):
    add_keywords = State()
    remove_keywords = State()


class UserState(StatesGroup):
    add_user = State()
    remove_user = State()


# admin /admin
@router.message(or_f(Command('admin'), ('–í—ñ–¥–∫—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é' == F.text), ('–ù–∞–∑–∞–¥' == F.text)))
async def cmd_admin(message: types.Message, state: FSMContext):
    await message.answer('Hello, admin!', reply_markup=kb.admin_menu)
    await state.clear()


# hide admin menu
@router.message(F.text == '–°—Ö–æ–≤–∞—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é')
async def hide_admin_menu(message: types.Message):
    await message.answer('–ê–¥–º—ñ–Ω –º–µ–Ω—é –ø—Ä–∏—Ö–æ–≤–∞–Ω–µ', reply_markup=kb.hide_admin_menu)
    print(auth_in_progress, add_chats_in_progress, check_chats_in_progress)


# account
@router.message(F.text == '–ê–∫–∫–∞—É–Ω—Ç')
async def account_list(message: types.Message):
    accounts = await rq.orm_get_accounts()

    if not accounts:
        await message.answer('–ê–∫–∫–∞—É–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î', reply_markup=kb.account_add)
        return

    btns = {account.phone_number: f'account_{account.phone_number}' for account in accounts}

    await message.answer('–î–æ–±–∞–≤—Ç–µ –Ω–æ–≤–∏–π –∞–∫–∫–∞—É–Ω—Ç', reply_markup=kb.account_add)
    await message.answer("–∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∫–∞—É–Ω—Ç —ñ—Å–Ω—É—é—á–∏–π:", reply_markup=kb.get_callback_btns(btns=btns))


# callback account manage
@router.callback_query(F.data.startswith('account_'))
async def account_manage(callback: types.CallbackQuery):
    phone_number = callback.data.split('_')[-1]

    if await rq.orm_is_account_active(phone_number):
        await callback.message.edit_text('–ê–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–∞–∑ –∞–∫—Ç–∏–≤–Ω–∏–π. –î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å.')
        return

    btns = {
        '–í–∏–¥–∞–ª–∏—Ç–∏': f'remove_{phone_number}',
        '–ù–∞–∑–∞–¥': 'back_to_accounts'
    }

    await callback.message.edit_text('–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–∫–∫–∞—É–Ω—Ç—É', reply_markup=kb.get_callback_btns(btns=btns))


# callback account delete
@router.callback_query(F.data.startswith('remove_'))
async def account_remove(callback: types.CallbackQuery):
    phone_number = callback.data.split('_')[-1]
    is_active = await rq.orm_is_account_active(phone_number)
    btns = {'–ù–∞–∑–∞–¥': 'back_to_accounts'}

    if is_active:
        await callback.message.edit_text('–ê–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–∞–∑ –∞–∫—Ç–∏–≤–Ω–∏–π. –î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å.',
                                         reply_markup=kb.get_callback_btns(btns=btns))
        return

    file_path = os.path.join('s', f'{phone_number}.')

    if os.path.exists(file_path):
        os.remove(file_path)

    await rq.orm_remove_account(phone_number)
    await callback.message.edit_text("–û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å —Ç–∞ —Ñ–∞–π–ª —Å–µ—Å—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–æ.")


# callback back
@router.callback_query(F.data == 'back_to_accounts')
async def account_back(callback: types.CallbackQuery, state: FSMContext):
    accounts = await rq.orm_get_accounts()

    if not accounts:
        await callback.answer()
        await callback.message.answer('–ê–∫–∫–∞—É–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î', reply_markup=kb.account_add)
        return

    btns = {account.phone_number: f'account_{account.phone_number}' for account in accounts}

    await callback.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∫–∞—É–Ω—Ç:", reply_markup=kb.get_callback_btns(btns=btns))
    await state.clear()


# add account
@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç')
async def add_account(message: types.Message, state: FSMContext):
    accounts = await rq.orm_get_accounts()

    for account in accounts:
        active_type = await rq.orm_check_active_type(account.phone_number)

        if account.is_active and active_type != 'check':
            await message.answer('–£ –≤–∞—Å —î –∞–∫—Ç–∏–≤–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∏. –î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å.')
            return

    await message.answer('–í–≤–µ–¥—ñ—Ç—å API ID üëá\n(–ø–æ–ª—É—á–∏—Ç–∏ –π–æ–≥–æ –º–æ–∂–Ω–∞ —Ç—É—Ç: https://my.telegram.org/auth)')
    await state.set_state(Auth.waiting_for_api_id)


# add account / api_id
@router.message(Auth.waiting_for_api_id)
async def get_api_id(message: types.Message, state: FSMContext):
    await state.update_data(api_id=message.text)
    await message.answer('–í–≤–µ–¥—ñ—Ç—å API HASH üëá')
    await state.set_state(Auth.waiting_for_api_hash)


# add account / api_hash
@router.message(Auth.waiting_for_api_hash)
async def get_api_hash(message: types.Message, state: FSMContext):
    await state.update_data(api_hash=message.text)
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É üëá')
    await state.set_state(Auth.waiting_for_phone_number)


# add account / phone
@router.message(Auth.waiting_for_phone_number)
async def phone_number_handler(message: types.Message, state: FSMContext):
    if message.text and message.text.isdigit():
        await state.update_data(phone_number=message.text)
        await message.answer(f"–î—è–∫—É—é! –¢–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {message.text}. –¢–µ–ø–µ—Ä —á–µ–∫–∞–π –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥—É.")
        data = await state.get_data()
        phone_number = data.get('phone_number')
        api_id = data.get('api_id')
        api_hash = data.get('api_hash')

        if api_id and api_hash and phone_number:
            await rq.orm_add_account(phone_number, api_id, api_hash)

            global login_manager

            login_manager = TelegramLogin()
            asyncio.create_task(login_manager.pyrogram_login(message, state))

            await state.set_state(Auth.waiting_for_code)
        else:
            await message.answer('–í–∏ –≤–≤–µ–ª–∏ —â–æ—Å—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.', reply_markup=kb.admin_menu)
    else:
        await message.answer("–í–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        await state.clear()


# add account / phone / code
@router.message(Auth.waiting_for_code)
async def code_handler(message: types.Message, state: FSMContext):
    global auth_in_progress

    if message.text and message.text.isdigit():
        code_text = message.text

        await login_manager.finish_login(message, code_text)
        await state.clear()
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")

    auth_in_progress = False


# add groups
@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç–∏ —á–∞—Ç–∏')
async def add_groups(message: types.Message):
    accounts = await rq.orm_get_accounts()

    if not accounts:
        await message.answer('–ê–∫–∫–∞—É–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î', reply_markup=kb.admin_menu)
        return

    btns = {account.phone_number: f'add_chats_{account.phone_number}' for account in accounts}

    await message.answer('–ú–µ–Ω—é ¬´–î–æ–±–∞–≤–∏—Ç–∏ —á–∞—Ç–∏¬ª', reply_markup=kb.back)
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∫–∞—É–Ω—Ç:", reply_markup=kb.get_callback_btns(btns=btns))


# Callback / Groups / Choose number
@router.callback_query(F.data.startswith('add_chats_'))
async def groups_choose_number(callback: types.CallbackQuery, state: FSMContext):
    phone_number = callback.data.split('_')[-1]
    is_active = await rq.orm_is_account_active(phone_number)
    active_type = await rq.orm_check_active_type(phone_number)

    if is_active and active_type != 'group':
        await callback.message.edit_text('–í–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —á–∞—Ç–∏!')
        return

    await state.update_data(phone_number=phone_number)
    await callback.message.edit_text('–ó–∞–ø—É—Å–∫–∞—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤...')
    await start_add_groups(callback, state)


# add groups / start
@router.callback_query(F.date == 'start_add_groups')
async def start_add_groups(callback: types.CallbackQuery, state: FSMContext):
    global add_chats_task

    if add_chats_task and not add_chats_task.done():
        btns = {'–ó—É–ø–∏–Ω–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤': 'stop_group_adding'}
        await callback.message.edit_text('–î–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤ –≤–∂–µ –ø—Ä–∞—Ü—é—î', reply_markup=kb.get_callback_btns(btns=btns))
        return
    else:
        await callback.message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±–∞–∑—É –≥—Ä—É–ø —É —Ñ–æ—Ä–º–∞—Ç—ñ .xlsx', reply_markup=kb.back)
        await state.set_state(ExcelFile.file_name)


# add groups / stop
@router.callback_query(F.data == 'stop_group_adding')
async def stop_group_adding(callback: types.CallbackQuery):
    global add_chats_task

    if add_chats_task and not add_chats_task.done():
        add_chats_task.cancel()
        await callback.answer()
        await callback.message.edit_text('–ü–æ—á–∏–Ω–∞—é –∑—É–ø–∏–Ω—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å...')
        await callback.message.answer('–î–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–æ', reply_markup=kb.admin_menu)
    else:
        await callback.message.answer('–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤.', reply_markup=kb.admin_menu)


# add groups / get xlsx
@router.message(ExcelFile.file_name)
async def add_groups_excel_file(message: types.Message, state: FSMContext, bot: Bot):
    global add_chats_task

    await state.update_data(file_name=message.document)
    data = await state.get_data()
    document = data.get('file_name')
    phone_number = data.get('phone_number')

    if document is None:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–∞–π–ª.", reply_markup=kb.admin_menu)
        await state.clear()
        return

    # If document is lxml create async task for ChatJoiner
    if document.mime_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
        file_info = await bot.get_file(document.file_id)
        await bot.download_file(file_info.file_path, os.getenv('EXCEL'))

        await message.reply(f'–§–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ, –∑–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å!')

        chat_joiner = ChatJoiner(phone_number, message)
        add_chats_task = asyncio.create_task(chat_joiner.join_chats())
    else:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å Excel —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ .xlsx", reply_markup=kb.admin_menu)

    await state.clear()


# Chat checker
@router.message(F.text == '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Ç—ñ–≤')
async def check_chats(message: types.Message):
    global check_chats_task

    if check_chats_task and not check_chats_task.done():
        await message.answer('–î–ª—è –∑—É–ø–∏–Ω–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó—É–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∞—Ç—ñ–≤¬ª',
                             reply_markup=kb.stop_chat_checker)
    else:
        await message.answer('–î–ª—è –∑–∞–ø—É—Å–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∞—Ç—ñ–≤¬ª',
                             reply_markup=kb.start_chat_checker)


# Start chat checker
@router.message(F.text == '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∞—Ç—ñ–≤')
async def start_check_chats(message: types.Message):
    global check_chats_task

    accounts = await rq.orm_get_accounts()

    if not accounts:
        await message.answer('–ê–∫–∫–∞—É–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î', reply_markup=kb.account_add)
        return

    if (check_chats_task and not check_chats_task.done()):
        await message.answer('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Ç—ñ–≤ –≤–∂–µ –ø—Ä–∞—Ü—é—î', reply_markup=kb.admin_menu)
    else:
        accounts = await rq.orm_get_accounts()

        for account in accounts:
            active_type = await rq.orm_check_active_type(account.phone_number)

            if account.is_active and active_type != 'check':
                await message.answer('–£ –≤–∞—Å —î –∞–∫—Ç–∏–≤–Ω—ñ –∞–∫–∫–∞—É–Ω—Ç–∏. –î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å.')
                return

        await message.answer('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Ç—ñ–≤ –∑–∞–ø—É—â–µ–Ω–∞', reply_markup=kb.admin_menu)
        check_message = CheckMessage(message)
        check_chats_task = asyncio.create_task(check_message.check_chat())


# Stop chat cheker
@router.message(F.text == '–ó—É–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∞—Ç—ñ–≤')
async def stop_chats_adding(message: types.Message):
    global check_chats_task

    if check_chats_task and not check_chats_task.done():
        check_chats_task.cancel()
        await message.answer('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Ç—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–∞', reply_markup=kb.admin_menu)
    else:
        await message.answer('–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Ç—ñ–≤.', reply_markup=kb.admin_menu)


# Add keywords
@router.message(F.text == '–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞')
async def keywords_menu(message: types.Message):
    await message.answer('–ú–µ–Ω—é "–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞"', reply_markup=kb.keywords)


# Keyword list
@router.message(F.text == '–°–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤')
async def keyword_list(message: types.Message):
    # orm_keywords = await rq.orm_get_keywords()
    keywords_str = ''

    # for keyword in orm_keywords:
        # keywords_str += f'{keyword.word}, '

    await message.answer(f'–°–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤\n\n{keywords_str}')


# Add keywords
@router.message(F.text == '–î–æ–¥–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞')
async def add_keywords(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É\n–ü—Ä–∏–∫–ª–∞–¥: –ö—ñ—Ç, —Å–æ–±–∞–∫–∞, –±–æ–±—Ä')
    await state.set_state(KeywordsState.add_keywords)


@router.message(KeywordsState.add_keywords)
async def add_keywords_first_step(message: types.Message, state: FSMContext):
    await state.update_data(keywords=message.text)
    data = await state.get_data()
    keywords_list = [i.strip() for i in data.get('keywords').split(',')]
    result = await rq.orm_add_keywords(keywords_list)

    if result:
        await message.answer('–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ñ', reply_markup=kb.keywords)
    else:
        await message.answer('–¢–∞–∫–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –≤–∂–µ —î –≤ –±–∞–∑—ñ', reply_markup=kb.keywords)

    await state.clear()


# Remove keywords
@router.message(F.text == '–í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞')
async def remove_keywords(message: types.Message, state: FSMContext):
    await message.answer('–©–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞, –≤–≤–µ–¥—ñ—Ç—å —ó—Ö —á–µ—Ä–µ–∑ –∫–æ–º—É\n–ü—Ä–∏–∫–ª–∞–¥: –ö—ñ—Ç, —Å–æ–±–∞–∫–∞, –±–æ–±—Ä')
    await state.set_state(KeywordsState.remove_keywords)


@router.message(KeywordsState.remove_keywords)
async def remove_keywords_first_step(message: types.Message, state: FSMContext):
    await state.update_data(keywords=message.text)
    data = await state.get_data()
    keywords_list = data.get('keywords').replace(' ', '').split(',')
    await rq.orm_remove_keywords(keywords_list)

    await message.answer('–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω—ñ', reply_markup=kb.keywords)
    await state.clear()


# Users
@router.message(F.text == '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ')
async def users_manage(message: types.Message):
    await message.answer('–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏', reply_markup=kb.users_manage)


# Users list
@router.message(F.text == '–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤')
async def users_manage(message: types.Message):
    users = await rq.orm_get_users()
    users_str = '–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n\n'

    for user in users:
        users_str += f'{user.name}\n\n'

    await message.answer(users_str, reply_markup=kb.users_manage)


# Add user
@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
async def add_user(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥—ñ—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n\n‚ùå - @bobr\n‚úî - bobr')
    await state.set_state(UserState.add_user)


@router.message(UserState.add_user)
async def add_user_first(message: types.Message, state: FSMContext):
    await state.update_data(user=message.text)
    data = await state.get_data()
    username = data.get('user')

    result = await rq.orm_add_user_by_name(username)

    if result:
        await message.answer('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–±–∞–≤–ª–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ', reply_markup=kb.users_manage)
    else:
        await message.answer('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É!')

    await state.clear()


@router.message(F.text == '–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
async def remove_user(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥—ñ—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n\n‚ùå - @bobr\n‚úî - bobr')
    await state.set_state(UserState.remove_user)


@router.message(UserState.remove_user)
async def remove_user_first(message: types.Message, state: FSMContext):
    await state.update_data(user=message.text)
    data = await state.get_data()
    username = data.get('user')

    result = await rq.orm_remove_user(username)

    if result:
        await message.answer('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ', reply_markup=kb.users_manage)
    else:
        await message.answer('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É!')


########## Subscribe ##########
@router.message(or_f(Command('user_subscribe'), F.text.lower('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫')))
async def cmd_user_subscribe(message: types.Message):
    ...
