import asyncio
import os

from aiogram import Router, types, F, Bot
from aiogram.filters import Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
from pyrogram import Client
from sqlalchemy.ext.asyncio import AsyncSession

import app.database.orm_query as rq
import app.keyboards.admin_keyboard as kb
from app.bots.authorization import TelegramLogin
from app.bots.chat_joiner import ChatJoiner
from app.bots.check_message import CheckMessage
from app.filters.check_admin import IsAdmin
from pyrogram import Client

load_dotenv()

router = Router()
router.message.filter(IsAdmin())
login_manager = TelegramLogin(os.getenv('API_ID'), os.getenv('API_HASH'))

add_chats_task = None
check_chats_task = None

auth_in_progress = False
add_chats_in_progress = False
check_chats_in_progress = False

class Auth(StatesGroup):
    waiting_for_phone_number = State()
    waiting_for_code = State()


class ExcelFile(StatesGroup):
    file_name = State()


class KeywordsState(StatesGroup):
    add_keywords = State()
    remove_keywords = State()


# admin /admin
@router.message(or_f(Command('admin'), ('–í—ñ–¥–∫—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é' == F.text), ('–ù–∞–∑–∞–¥' == F.text)))
async def cmd_admin(message: types.Message, state: FSMContext):
    await message.answer('Hello, admin!', reply_markup=kb.admin_menu)
    await state.clear()


# hide admin menu
@router.message(F.text == '–°—Ö–æ–≤–∞—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é')
async def hide_admin_menu(message: types.Message):
    await message.answer('–ê–¥–º—ñ–Ω –º–µ–Ω—é –ø—Ä–∏—Ö–æ–≤–∞–Ω–µ', reply_markup=kb.hide_admin_menu)


# account
@router.message(F.text == '–ê–∫–∫–∞—É–Ω—Ç')
async def account_manage(message: types.Message):
    if add_chats_in_progress or check_chats_in_progress:
        await message.answer('–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å')
    else:
        if len(os.listdir(os.getenv('SESSION_DIR'))) > 0:
            await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=kb.account_manage)
        else:
            await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é', reply_markup=kb.account_add)


# add account
@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç')
async def add_account(message: types.Message, state: FSMContext):
    global auth_in_progress

    if auth_in_progress or add_chats_in_progress or check_chats_in_progress:
        await message.answer('–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å')
    else:
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É üëá')
        await state.set_state(Auth.waiting_for_phone_number)
        auth_in_progress = True


# add account / phone
@router.message(Auth.waiting_for_phone_number)
async def phone_number_handler(message: types.Message, state: FSMContext):
    global auth_in_progress

    if message.text and message.text.isdigit():
        await state.update_data(phone_number=message.text)
        await message.answer(f"–î—è–∫—É—é! –¢–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {message.text}. –¢–µ–ø–µ—Ä —á–µ–∫–∞–π –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥—É.")

        asyncio.create_task(login_manager.pyrogram_login(message, state))

        await state.set_state(Auth.waiting_for_code)
    else:
        await message.answer("–í–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        await state.clear()
        auth_in_progress = False


# add account / phone / code
@router.message(Auth.waiting_for_code)
async def code_handler(message: types.Message, state: FSMContext):
    global auth_in_progress

    if message.text and message.text.isdigit():
        user_data = await state.get_data()
        code_text = message.text

        await login_manager.finish_login(message, code_text, user_data)
        await state.clear()
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")

    auth_in_progress = False


# delete account
@router.message(F.text == '–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç')
async def add_account(message: types.Message, session: AsyncSession):
    if auth_in_progress or add_chats_in_progress or check_chats_in_progress:
        await message.answer('–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å')
    else:
        await message.answer('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ', reply_markup=kb.admin_menu)

        if os.path.isfile(os.getenv('SESSION_FULLNAME')):
            os.remove(os.getenv('SESSION_FULLNAME'))
            await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π")
        else:
            await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π")
        await rq.orm_remove_channels(session)


# add groups
@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç–∏ —á–∞—Ç–∏')
async def add_groups(message: types.Message):
    if auth_in_progress or check_chats_in_progress:
        await message.answer('–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å')
    else:
        if add_chats_task and not add_chats_task.done():
            await message.answer('–î–ª—è –∑—É–ø–∏–Ω–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó—É–ø–∏–Ω–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤¬ª', reply_markup=kb.stop_add_chats)
        else:
            await message.answer('–î–ª—è –∑–∞–ø—É—Å–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤¬ª', reply_markup=kb.start_add_chats)


# add groups / start
@router.message(F.text == '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤')
async def start_add_groups(message: types.Message, state: FSMContext):
    global add_chats_task, add_chats_in_progress

    if auth_in_progress or check_chats_in_progress:
        await message.answer('–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å')
    else:
        if add_chats_task and not add_chats_task.done():
            await message.answer('–î–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤ –≤–∂–µ –ø—Ä–∞—Ü—é—î', reply_markup=kb.admin_menu)
        else:
            await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±–∞–∑—É –≥—Ä—É–ø —É —Ñ–æ—Ä–º–∞—Ç—ñ .xlsx')
            await state.set_state(ExcelFile.file_name)
            add_chats_in_progress = True


# add groups / get xlsx
@router.message(ExcelFile.file_name)
async def add_groups_excel_file(message: types.Message, state: FSMContext, bot: Bot, session: AsyncSession):
    global add_chats_task, add_chats_in_progress

    await state.update_data(file_name=message.document)
    data = await state.get_data()
    document = data.get('file_name')

    if document is None:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–∞–π–ª.", reply_markup=kb.admin_menu)
        await state.clear()
        return

    if document.mime_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
        file_info = await bot.get_file(document.file_id)
        await bot.download_file(file_info.file_path, os.getenv('EXCEL'))

        await message.reply(f'–§–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ', reply_markup=kb.admin_menu)

        chat_joiner = ChatJoiner(message, session)
        add_chats_task = asyncio.create_task(chat_joiner.join_chats(session))
        await state.clear()
    else:
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å Excel —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ .xlsx", reply_markup=kb.admin_menu)
        add_chats_in_progress = False


# add groups / stop
@router.message(F.text == '–ó—É–ø–∏–Ω–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤')
async def stop_chats_adding(message: types.Message):
    global add_chats_task, add_chats_in_progress

    if auth_in_progress or check_chats_in_progress:
        await message.answer('–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å')
    else:
        if add_chats_task and not add_chats_task.done():
            add_chats_task.cancel()
            await message.answer('–î–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–æ', reply_markup=kb.admin_menu)
        else:
            await message.answer('–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤.', reply_markup=kb.admin_menu)
        add_chats_in_progress = False


# Chat checker
@router.message(F.text == '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Ç—ñ–≤')
async def check_chats(message: types.Message, session: AsyncSession):
    global check_chats_task

    if auth_in_progress or add_chats_in_progress:
        await message.answer('–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å')
    else:
        if check_chats_task and not check_chats_task.done():
            await message.answer('–î–ª—è –∑—É–ø–∏–Ω–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó—É–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∞—Ç—ñ–≤¬ª',
                                 reply_markup=kb.stop_chat_checker)
        else:
            await message.answer('–î–ª—è –∑–∞–ø—É—Å–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∞—Ç—ñ–≤¬ª', reply_markup=kb.start_chat_checker)

# Start chat checker
@router.message(F.text == '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∞—Ç—ñ–≤')
async def start_check_chats(message: types.Message, session: AsyncSession):
    global check_chats_task, check_chats_in_progress

    if auth_in_progress or add_chats_in_progress:
        await message.answer('–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å')
    else:
        if check_chats_task and not check_chats_task.done():
            await message.answer('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Ç—ñ–≤ –≤–∂–µ –ø—Ä–∞—Ü—é—î', reply_markup=kb.admin_menu)
        else:
            await message.answer('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Ç—ñ–≤ –∑–∞–ø—É—â–µ–Ω–∞', reply_markup=kb.admin_menu)
            check_message = CheckMessage(message)
            check_chats_task = asyncio.create_task(check_message.check_chat(session))
        check_chats_in_progress = True

# Stop chat cheker
@router.message(F.text == '–ó—É–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∞—Ç—ñ–≤')
async def stop_chats_adding(message: types.Message):
    global check_chats_task, check_chats_in_progress

    if auth_in_progress or add_chats_in_progress:
        await message.answer('–î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å')
    else:
        if check_chats_task and not check_chats_task.done():
            check_chats_task.cancel()
            await message.answer('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Ç—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–∞', reply_markup=kb.admin_menu)
        else:
            await message.answer('–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Ç—ñ–≤.', reply_markup=kb.admin_menu)

        check_chats_in_progress = False


# Add keywords
@router.message(F.text == '–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞')
async def keywords_menu(message: types.Message):
    await message.answer('–ú–µ–Ω—é "–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞"', reply_markup=kb.keywords)


# Keyword list
@router.message(F.text == '–°–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤')
async def keyword_list(message: types.Message, session: AsyncSession):
    orm_keywords = await rq.orm_get_keywords(session)
    keywords_str = ''

    for keyword in orm_keywords:
        keywords_str += f'{keyword.word}, '

    await message.answer(f'–°–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤\n\n{keywords_str}')


# Add keywords
@router.message(F.text == '–î–æ–¥–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞')
async def add_keywords(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É\n–ü—Ä–∏–∫–ª–∞–¥: –ö—ñ—Ç, —Å–æ–±–∞–∫–∞, –±–æ–±—Ä')
    await state.set_state(KeywordsState.add_keywords)


@router.message(KeywordsState.add_keywords)
async def add_keywords_first_step(message: types.Message, state: FSMContext, session: AsyncSession):
    await state.update_data(keywords=message.text)
    data = await state.get_data()
    keywords_list = data.get('keywords').replace(' ', '').split(',')
    result = await rq.orm_add_keywords(keywords_list, session)

    if result:
        await message.answer('–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ñ', reply_markup=kb.keywords)
    else:
        await message.answer('–ü–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É', reply_markup=kb.keywords)

    await state.clear()


# Remove keywords
@router.message(F.text == '–í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞')
async def remove_keywords(message: types.Message, state: FSMContext):
    await message.answer('–©–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞, –≤–≤–µ–¥—ñ—Ç—å —ó—Ö —á–µ—Ä–µ–∑ –∫–æ–º—É\n–ü—Ä–∏–∫–ª–∞–¥: –ö—ñ—Ç, —Å–æ–±–∞–∫–∞, –±–æ–±—Ä')
    await state.set_state(KeywordsState.remove_keywords)


@router.message(KeywordsState.remove_keywords)
async def remove_keywords_first_step(message: types.Message, state: FSMContext, session: AsyncSession):
    await state.update_data(keywords=message.text)
    data = await state.get_data()
    keywords_list = data.get('keywords').replace(' ', '').split(',')
    await rq.orm_remove_keywords(keywords_list, session)

    await message.answer('–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω—ñ', reply_markup=kb.keywords)
    await state.clear()
