import asyncio
import os

from datetime import datetime, timedelta
import sys

from aiogram import Router, types, F, Bot
from aiogram.filters import Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

import app.database.orm_query as rq
import app.keyboards.admin_keyboard as kb
import app.keyboards.user_keyboard as kb_user

from app.bots.authorization import TelegramLogin
from app.bots.chat_joiner import ChatJoiner
from app.bots.check_message import CheckMessage
from app.filters.check_admin import IsAdmin

load_dotenv()

router = Router()
router.message.filter(IsAdmin())

add_chats_task = None
check_chats_task = None

login_manager = None

auth_in_progress = False
add_chats_in_progress = False
check_chats_in_progress = False


class Auth(StatesGroup):
    waiting_for_api_id = State()
    waiting_for_api_hash = State()
    waiting_for_phone_number = State()
    waiting_for_code = State()


class ExcelFile(StatesGroup):
    file_name = State()
    country = State()
    city = State()
    is_general = State()


class UserState(StatesGroup):
    add_user = State()
    remove_user = State()


# admin /admin
@router.message(
    or_f(
        Command("admin"),
        ("–í—ñ–¥–∫—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é" == F.text),
        ("–ù–∞–∑–∞–¥" == F.text),
        ("‚óÄ –ù–∞–∑–∞–¥" == F.text),
    )
)
async def cmd_admin(message: types.Message, state: FSMContext):
    await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=kb.admin_menu)
    await state.clear()


# hide admin menu
@router.message(F.text == "–°—Ö–æ–≤–∞—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é")
async def hide_admin_menu(message: types.Message):
    await message.answer("–ê–¥–º—ñ–Ω –º–µ–Ω—é –ø—Ä–∏—Ö–æ–≤–∞–Ω–µ", reply_markup=kb.hide_admin_menu)


# account
@router.message(F.text == "–ê–∫–∫–∞—É–Ω—Ç–∏")
async def account_list(message: types.Message):
    accounts = await rq.orm_get_accounts()

    if not accounts:
        await message.answer("–ê–∫–∫–∞—É–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î", reply_markup=kb.account_add)
        return

    btns = {
        account.phone_number: f"account_{account.phone_number}" for account in accounts
    }

    await message.answer("–î–æ–±–∞–≤—Ç–µ –Ω–æ–≤–∏–π –∞–∫–∫–∞—É–Ω—Ç", reply_markup=kb.account_add)
    await message.answer(
        "–∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∫–∞—É–Ω—Ç —ñ—Å–Ω—É—é—á–∏–π:", reply_markup=kb.get_callback_btns(btns=btns)
    )


# callback account manage
@router.callback_query(F.data.startswith("account_"))
async def account_manage(callback: types.CallbackQuery):
    phone_number = callback.data.split("_")[-1]

    if await rq.orm_is_account_active(phone_number):
        await callback.message.edit_text(
            "–ê–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–∞–∑ –∞–∫—Ç–∏–≤–Ω–∏–π. –î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å."
        )
        return

    btns = {"–í–∏–¥–∞–ª–∏—Ç–∏": f"remove_{phone_number}", "–ù–∞–∑–∞–¥": "back_to_accounts"}

    await callback.message.edit_text(
        "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–∫–∫–∞—É–Ω—Ç—É", reply_markup=kb.get_callback_btns(btns=btns)
    )


# callback account delete
@router.callback_query(F.data.startswith("remove_"))
async def account_remove(callback: types.CallbackQuery):
    phone_number = callback.data.split("_")[-1]
    is_active = await rq.orm_is_account_active(phone_number)
    btns = {"–ù–∞–∑–∞–¥": "back_to_accounts"}

    if is_active:
        await callback.message.edit_text(
            "–ê–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–∞–∑ –∞–∫—Ç–∏–≤–Ω–∏–π. –î–ª—è –ø–æ—á–∞—Ç–∫—É –∑—É–ø–∏–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å.",
            reply_markup=kb.get_callback_btns(btns=btns),
        )
        return

    file_path = os.path.join("s", f"{phone_number}.")

    if os.path.exists(file_path):
        os.remove(file_path)

    await rq.orm_remove_account(phone_number)
    await callback.message.edit_text("–û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å —Ç–∞ —Ñ–∞–π–ª —Å–µ—Å—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–æ.")


# callback back
@router.callback_query(F.data == "back_to_accounts")
async def account_back(callback: types.CallbackQuery, state: FSMContext):
    accounts = await rq.orm_get_accounts()

    if not accounts:
        await callback.answer()
        await callback.message.answer("–ê–∫–∫–∞—É–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î", reply_markup=kb.account_add)
        return

    btns = {
        account.phone_number: f"account_{account.phone_number}" for account in accounts
    }

    await callback.message.edit_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –∞–∫–∫–∞—É–Ω—Ç:", reply_markup=kb.get_callback_btns(btns=btns)
    )
    await state.clear()


# add account
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç")
async def add_account(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å API ID üëá\n(–ø–æ–ª—É—á–∏—Ç–∏ –π–æ–≥–æ –º–æ–∂–Ω–∞ —Ç—É—Ç: https://my.telegram.org/auth)"
    )
    await state.set_state(Auth.waiting_for_api_id)


# add account / api_id
@router.message(Auth.waiting_for_api_id)
async def get_api_id(message: types.Message, state: FSMContext):
    await state.update_data(api_id=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å API HASH üëá")
    await state.set_state(Auth.waiting_for_api_hash)


# add account / api_hash
@router.message(Auth.waiting_for_api_hash)
async def get_api_hash(message: types.Message, state: FSMContext):
    await state.update_data(api_hash=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É üëá")
    await state.set_state(Auth.waiting_for_phone_number)


# add account / phone
@router.message(Auth.waiting_for_phone_number)
async def phone_number_handler(message: types.Message, state: FSMContext):
    if message.text and message.text.isdigit():
        await state.update_data(phone_number=message.text)
        await message.answer(
            f"–î—è–∫—É—é! –¢–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {message.text}. –¢–µ–ø–µ—Ä —á–µ–∫–∞–π –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥—É."
        )
        data = await state.get_data()
        phone_number = data.get("phone_number")
        api_id = data.get("api_id")
        api_hash = data.get("api_hash")

        if api_id and api_hash and phone_number:
            await rq.orm_add_account(phone_number, api_id, api_hash)

            global login_manager

            login_manager = TelegramLogin()
            asyncio.create_task(login_manager.pyrogram_login(message, state))

            await state.set_state(Auth.waiting_for_code)
        else:
            await message.answer(
                "–í–∏ –≤–≤–µ–ª–∏ —â–æ—Å—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.",
                reply_markup=kb.admin_menu,
            )
    else:
        await message.answer(
            "–í–≤–µ–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."
        )
        await state.clear()


# add account / phone / code
@router.message(Auth.waiting_for_code)
async def code_handler(message: types.Message, state: FSMContext):
    global auth_in_progress

    if message.text and message.text.isdigit():
        code_text = message.text

        await login_manager.finish_login(message, code_text)
        await state.clear()
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")

    auth_in_progress = False


# add groups
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç–∏ —á–∞—Ç–∏")
async def add_groups(message: types.Message, state: FSMContext):
    accounts = await rq.orm_get_accounts()

    if not accounts:
        await message.answer("–ê–∫–∫–∞—É–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î", reply_markup=kb.admin_menu)
        return

    await message.answer("–ú–µ–Ω—é ¬´–î–æ–±–∞–≤–∏—Ç–∏ —á–∞—Ç–∏¬ª", reply_markup=kb.back)
    print(add_chats_task)

    if add_chats_task and not add_chats_task.done():
        btns = {"–ó—É–ø–∏–Ω–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤": "stop_group_adding"}
        await message.answer(
            "–î–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤ –≤–∂–µ –ø—Ä–∞—Ü—é—î", reply_markup=kb.get_callback_btns(btns=btns)
        )
        return
    else:
        await message.answer(
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±–∞–∑—É –≥—Ä—É–ø —É —Ñ–æ—Ä–º–∞—Ç—ñ .xlsx", reply_markup=kb.back
        )
        await state.set_state(ExcelFile.file_name)


# add groups / stop
@router.callback_query(F.data == "stop_group_adding")
async def stop_group_adding(callback: types.CallbackQuery):
    global add_chats_task

    if add_chats_task and not add_chats_task.done():
        add_chats_task.cancel()
        await callback.answer()
        await callback.message.edit_text("–ü–æ—á–∏–Ω–∞—é –∑—É–ø–∏–Ω—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å...", kb.admin_menu)
    else:
        await callback.message.answer(
            "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—ñ–≤.", reply_markup=kb.admin_menu
        )


# add groups / get xlsx
@router.message(ExcelFile.file_name)
async def add_groups_excel_file(message: types.Message, state: FSMContext, bot: Bot):
    global add_chats_task

    await state.update_data(file_name=message.document)
    data = await state.get_data()
    document = data.get("file_name")

    if document is None:
        await message.reply(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–∞–π–ª.", reply_markup=kb.admin_menu
        )
        await state.clear()
        return

    # If document is lxml create async task for ChatJoiner
    if (
        document.mime_type
        == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    ):
        file_info = await bot.get_file(document.file_id)
        await bot.download_file(file_info.file_path, os.getenv("EXCEL"))

        await message.reply(f"–§–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ")
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫—Ä–∞—ó–Ω—É", reply_markup=kb.back)
        await state.set_state(ExcelFile.country)
    else:
        await message.reply(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å Excel —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ .xlsx",
            reply_markup=kb.admin_menu,
        )
        await state.clear()


@router.message(ExcelFile.country)
async def add_groups_excel_file_first(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ", reply_markup=kb.back)
    await state.set_state(ExcelFile.city)


@router.message(ExcelFile.city)
async def add_groups_excel_file_second(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–¢–∏–ø –∑–∞–≥–∞–ª—å–Ω–∏–π?\n–í—ñ–¥–ø–æ–≤—ñ–¥—å: –¢–∞–∫ / –ù—ñ", reply_markup=kb.back)
    await state.set_state(ExcelFile.is_general)


@router.message(ExcelFile.is_general)
async def add_groups_excel_file_third(message: types.Message, state: FSMContext):
    global add_chats_task

    await state.update_data(is_general=message.text)
    data = await state.get_data()

    country = data.get("country")
    if country:
        country = country.lower()

    city = data.get("city")
    if city:
        city = city.lower()

    is_general = data.get("is_general")

    if is_general.lower() == "—Ç–∞–∫":
        is_general = True
    elif is_general.lower() == "–Ω—ñ":
        is_general = False
    else:
        await message.answer(
            "–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–≤—ñ—Ä–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –ü—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–µ—É—Å–ø—ñ—à–Ω–æ.",
            reply_markup=kb.admin_menu,
        )
        await state.clear()
        return

    await message.answer("–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å!", reply_markup=kb.admin_menu)
    await state.clear()

    chat_joiner = ChatJoiner(message)
    # await chat_joiner.join_chats(country, city, is_general)
    add_chats_task = asyncio.create_task(
        chat_joiner.join_chats(country, city, is_general)
    )


# Chat checker
@router.message(F.text == "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Ç—ñ–≤")
async def check_chats(message: types.Message):
    global check_chats_task

    if check_chats_task and not check_chats_task.done():
        await message.answer(
            "–î–ª—è –∑—É–ø–∏–Ω–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó—É–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∞—Ç—ñ–≤¬ª",
            reply_markup=kb.stop_chat_checker,
        )
    else:
        await message.answer(
            "–î–ª—è –∑–∞–ø—É—Å–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∞—Ç—ñ–≤¬ª",
            reply_markup=kb.start_chat_checker,
        )


# Start chat checker
@router.message(F.text == "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∞—Ç—ñ–≤")
async def start_check_chats(message: types.Message):
    global check_chats_task

    accounts = await rq.orm_get_accounts()

    if not accounts:
        await message.answer("–ê–∫–∫–∞—É–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î", reply_markup=kb.account_add)
        return

    if check_chats_task and not check_chats_task.done():
        await message.answer("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Ç—ñ–≤ –≤–∂–µ –ø—Ä–∞—Ü—é—î", reply_markup=kb.admin_menu)
    else:
        await message.answer("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Ç—ñ–≤ –∑–∞–ø—É—â–µ–Ω–∞", reply_markup=kb.admin_menu)
        check_message = CheckMessage(message)
        check_chats_task = asyncio.create_task(check_message.check_chat())


# Stop chat cheker
@router.message(F.text == "–ó—É–ø–∏–Ω–∏—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∞—Ç—ñ–≤")
async def stop_chats_adding(message: types.Message):
    global check_chats_task

    if check_chats_task and not check_chats_task.done():
        check_chats_task.cancel()
        await message.answer("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Ç—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–∞", reply_markup=kb.admin_menu)
    else:
        await message.answer(
            "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Ç—ñ–≤.", reply_markup=kb.admin_menu
        )


# Users
@router.message(F.text == "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
async def users_manage(message: types.Message):
    await message.answer("–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏", reply_markup=kb.users_manage)


# Users list
@router.message(F.text == "–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
async def users_manage(message: types.Message):
    users = await rq.orm_get_users()
    users_str = "–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n\n"

    for user in users:
        users_str += f"{user.name}\n\n"

    await message.answer(users_str, reply_markup=kb.users_manage)


# Add user
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def add_user(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n\n‚ùå - @bobr\n‚úî - bobr")
    await state.set_state(UserState.add_user)


@router.message(UserState.add_user)
async def add_user_first(message: types.Message, state: FSMContext):
    await state.update_data(user=message.text)
    data = await state.get_data()
    username = data.get("user")

    result = await rq.orm_add_user_by_name(username)

    if result:
        await message.answer(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–±–∞–≤–ª–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ", reply_markup=kb.users_manage
        )
    else:
        await message.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É!")

    await state.clear()


@router.message(F.text == "–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def remove_user(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n\n‚ùå - @bobr\n‚úî - bobr")
    await state.set_state(UserState.remove_user)


@router.message(UserState.remove_user)
async def remove_user_first(message: types.Message, state: FSMContext):
    await state.update_data(user=message.text)
    data = await state.get_data()
    username = data.get("user")

    result = await rq.orm_remove_user(username)

    if result:
        await message.answer(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ", reply_markup=kb.users_manage
        )
    else:
        await message.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É!")


########## Subscribe ##########


class Subscriber(StatesGroup):
    add_tg_id = State()
    remove_tg_id = State()


KEY_WORDS = {
    "—Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤": "–°–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ üìÉ",
    "—ñ—Å—Ç–æ—Ä—ñ—è –ø—ñ–¥–ø–∏—Å–æ–∫": "–Ü—Å—Ç–æ—Ä—ñ—è –ø—ñ–¥–ø–∏—Å–æ–∫ üìñ",
    "–≤–∏–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É": "–í–∏–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É ‚úÖ",
    "–≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É": "–í–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É ‚ùå",
    "–Ω–∞–∑–∞–¥": "‚óÄ –ù–∞–∑–∞–¥",
}

SUBSCRIBE_KB = kb.get_keyboard(
    KEY_WORDS["—Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤"],
    KEY_WORDS["—ñ—Å—Ç–æ—Ä—ñ—è –ø—ñ–¥–ø–∏—Å–æ–∫"],
    KEY_WORDS["–≤–∏–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É"],
    KEY_WORDS["–≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É"],
    KEY_WORDS["–Ω–∞–∑–∞–¥"],
    placeholder="–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é...",
    sizes=(2,),
)

PERIOD_KB = kb.get_callback_btns(
    btns={
        "3 –¥–Ω—è": "subscription_period_3",
        "30 –¥–Ω—ñ–≤": "subscription_period_30",
        "60 –¥–Ω—ñ–≤": "subscription_period_60",
        "90 –¥–Ω—ñ–≤": "subscription_period_90",
    }
)


@router.message(
    or_f(Command("user_subscribe"), "–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫" == F.text.lower())
)
async def cmd_user_subscribe(message: types.Message):
    await message.answer(
        '–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –≤ –º–µ–Ω—é "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫"', reply_markup=SUBSCRIBE_KB
    )


@router.message(F.text == KEY_WORDS["—Å–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤"])
async def subscribe_list(message: types.Message):
    orm_data = await rq.orm_get_subscribers()

    if orm_data:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ üëá")

        for item in orm_data:
            if item.is_subscribed:
                start_date = item.start_subscription_date.strftime("%Y-%m-%d")
                end_date = item.end_subscription_date.strftime("%Y-%m-%d")

                await message.answer(
                    f"<code>{item.user_id}</code> | –ê–∫—Ç–∏–≤–Ω–∞ –≤—ñ–¥ {start_date} –¥–æ {end_date}"
                )
    else:
        await message.answer("–ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤")


@router.message(F.text == KEY_WORDS["—ñ—Å—Ç–æ—Ä—ñ—è –ø—ñ–¥–ø–∏—Å–æ–∫"])
async def subscribe_history(message: types.Message):
    orm_data = await rq.orm_get_subscribers()

    if orm_data:
        await message.answer("–Ü—Å—Ç–æ—Ä—ñ—è –ø—ñ–¥–ø–∏—Å–æ–∫ üëá")

        for item in orm_data:
            start_date = item.start_subscription_date.strftime("%Y-%m-%d")
            end_date = item.end_subscription_date.strftime("%Y-%m-%d")

            if item.is_subscribed:
                await message.answer(
                    f"<code>{item.user_id}</code> | {'–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ'} | –ê–∫—Ç–∏–≤–Ω–∞ –≤—ñ–¥ {start_date} –¥–æ {end_date}"
                )
            else:
                await message.answer(
                    f"<code>{item.user_id}</code> | {'–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'} | –ë—É–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤—ñ–¥ {start_date} –¥–æ {end_date}"
                )
    else:
        await message.answer("–ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–æ–∫")


@router.message(F.text == KEY_WORDS["–≤–∏–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É"])
async def add_subscriber(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å ID –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞: ", reply_markup=kb.back)
    await state.set_state(Subscriber.add_tg_id)


@router.message(Subscriber.add_tg_id)
async def add_subscriber_first(message: types.Message, state: FSMContext):
    await state.update_data(tg_id=message.text)
    data = await state.get_data()

    try:
        tg_id = int(data.get("tg_id"))

        if tg_id:
            await message.answer("–ù–∞ —Å–∫—ñ–ª—å–∫–∏ –≤–∏–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É?", reply_markup=PERIOD_KB)
    except ValueError:
        await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID", reply_markup=PERIOD_KB)
        await state.clear()


@router.callback_query(F.data.startswith("subscription_period_"))
async def subscription_period(
    callback: types.CallbackQuery, state: FSMContext, bot: Bot
):
    period = int(callback.data.split("_")[-1])
    data = await state.get_data()
    tg_id = data.get("tg_id")

    await callback.answer()

    user_data = await rq.orm_get_user(tg_id)

    if not user_data:
        await callback.message.answer(
            "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º –∞–π–¥—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ ‚ùå\n\n–î–ª—è –ø–æ—á–∞—Ç–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É START, —â–æ–± –ø–æ—á–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å—É–≤–∞—Ç–∏—Å—è –≤ –±–∞–∑—ñ.",
            reply_markup=SUBSCRIBE_KB,
        )
        return

    subscriber_result = await rq.orm_get_subscriber(tg_id)
    start_date = datetime.now()
    end_date = start_date + timedelta(days=period)

    if not subscriber_result:
        result = await rq.orm_add_subscriber(tg_id, start_date, end_date)
    else:
        await rq.orm_disable_all_subscriptions(tg_id)
        result = await rq.orm_add_subscriber(tg_id, start_date, end_date)

    if result:
        if user_data.name:
            await callback.message.answer(
                f"–ü—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–¥–∞–Ω–∞ –Ω–∞ {period} –¥–Ω—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{user_data.name} ({tg_id})",
                reply_markup=SUBSCRIBE_KB,
            )
        else:
            await callback.message.answer(
                f"–ü—ñ–¥–ø–∏—Å–∫–∞ –≤–∏–¥–∞–Ω–∞ –Ω–∞ {period} –¥–Ω—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {tg_id}",
                reply_markup=SUBSCRIBE_KB,
            )

        await bot.send_message(
            chat_id=tg_id,
            text=f'–í–∞–º –±—É–ª–∞ –≤–∏–¥–∞–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period} {"–¥–Ω—è" if period == 3 else "–¥–Ω—ñ–≤"}',
            reply_markup=kb_user.user_menu,
        )
    else:
        await callback.message.answer(f"{result}")

    await state.clear()


@router.message(F.text == KEY_WORDS["–≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É"])
async def remove_subscriber(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", reply_markup=kb.back
    )
    await state.set_state(Subscriber.remove_tg_id)


@router.message(Subscriber.remove_tg_id)
async def remove_subscriber_first(message: types.Message, state: FSMContext):
    await state.update_data(tg_id=message.text)
    data = await state.get_data()

    try:
        tg_id = data.get("tg_id")

        user_data = await rq.orm_get_user(tg_id)

        if user_data:
            result = await rq.orm_disable_active_subscribers(tg_id)

            if result:
                await message.answer(
                    f"–ü—ñ–¥–ø–∏—Å–∫–∞ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {f'@{user_data.name} ' if user_data.name else ' '}(<code>{tg_id}</code>) —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞.",
                    reply_markup=SUBSCRIBE_KB,
                )
            else:
                await message.answer(f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢", reply_markup=SUBSCRIBE_KB)
        else:
            await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID", reply_markup=SUBSCRIBE_KB)
    except:
        await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID", reply_markup=SUBSCRIBE_KB)

    await state.clear()


# --------------------------- ACCESS ---------------------------
@router.message(F.text.lower() == "–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—ñ–≤")
async def access_manager(message: types.Message):
    users = await rq.orm_get_users()
    btns = {}

    for user in users:
        btns[user.name] = f"access_user_{user.tg_id}"

    await message.answer('–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –≤ "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—ñ–≤"', reply_markup=kb.back)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ üëá", reply_markup=kb.get_callback_btns(btns=btns)
    )


@router.callback_query(F.data == "back_to_access_manager")
async def access_manager_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    users = await rq.orm_get_users()
    btns = {}

    for user in users:
        btns[user.name] = f"access_user_{user.tg_id}"

    # await callback.message.answer('', reply_markup=kb.back)
    await callback.message.edit_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ üëá", reply_markup=kb.get_callback_btns(btns=btns)
    )


@router.callback_query(F.data.startswith("access_user_"))
async def access_user_manage(callback: types.CallbackQuery, state: FSMContext):
    tg_id = callback.data.split("_")[-1]
    user = await rq.orm_get_user(tg_id)
    user_db_access = ""

    await state.set_data({"tg_id": user.tg_id})

    btns = {
        "–í–∏–¥–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–∏": "access_get_list",
        "–ó–∞–±—Ä–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–∏": "access_get_user_list",
        "–ù–∞–∑–∞–¥": "back_to_access_manager",
    }

    if user.db_list:
        for db in user.db_list:
            user_db_access += f" - {db}\n"

    answer_str = f"{f'@{user.name}' if user.name else '-'} (<code>{tg_id}</code>)\n–ù–∞—è–≤–Ω—ñ –¥–æ—Å—Ç—É–ø–∏:\n{user_db_access}\n–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é üëá"

    await callback.message.edit_text(
        answer_str, reply_markup=kb.get_callback_btns(btns=btns)
    )


@router.callback_query(F.data.startswith("access_get_list"))
async def get_access(callback: types.CallbackQuery):
    channels_data = await rq.get_unique_channels_data()
    is_general = ""
    btns = {}

    for count, channel in enumerate(channels_data):
        if channel[2]:
            is_general = "–¢–∞–∫"
        else:
            is_general = "–ù—ñ"

        btns[f"–ö—Ä–∞—ó–Ω–∞: {channel[0]}, –º—ñ—Å—Ç–æ: {channel[1]}, –∑–∞–≥–∞–ª—å–Ω–∏–π: {is_general}"] = (
            f"access_get_db_{count}"
        )

    btns["–ù–∞–∑–∞–¥"] = "back_to_access_manager"

    await callback.answer()

    if channels_data:
        await callback.message.edit_text(
            f"–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–∑—É üìñ",
            reply_markup=kb.get_callback_btns(btns=btns, sizes=(1,)),
        )


@router.callback_query(F.data.startswith("access_get_db_"))
async def get_access_to_db(callback: types.CallbackQuery, state: FSMContext):
    db_id = callback.data.split("_")[-1]
    data = await state.get_data()

    channels_data = await rq.get_unique_channels_data()

    for count, channel in enumerate(channels_data):
        if count == int(db_id):
            result = await rq.orm_update_user_db(
                data["tg_id"], f"{channel[0]} {channel[1]} {channel[2]}"
            )

            btns = {"–ù–∞–∑–∞–¥": "back_to_access_manager"}
            if result:
                await callback.message.edit_text(
                    "–î–æ—Å—Ç—É–ø –≤–∏–¥–∞–Ω–∏–π", reply_markup=kb.get_callback_btns(btns=btns)
                )
                await callback.bot.send_message(
                    chat_id=int(data["tg_id"]),
                    text=f"–í–∞–º –≤–∏–¥–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {channel[0]} / {channel[1]}",
                )
            else:
                await callback.message.edit_text(
                    "–î–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó –±–¥ –≤–∂–µ –≤–∏–¥–∞–Ω–∏–π, –∞–±–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É",
                    reply_markup=kb.get_callback_btns(btns=btns),
                )


@router.callback_query(F.data.startswith("access_get_user_list"))
async def remove_access(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tg_id = data.get("tg_id")

    if tg_id:
        user = await rq.orm_get_user(tg_id)

        if user:
            await state.update_data({"db_list": user.db_list})
            btns = {}

            for count, db in enumerate(user.db_list):
                btns[db] = f"access_remove_{count}"

            btns["–ù–∞–∑–∞–¥"] = "back_to_access_manager"

            await callback.message.edit_text(
                f"–í–∏–±–µ—Ä—ñ—Ç—å –ë–î", reply_markup=kb.get_callback_btns(btns=btns)
            )
    else:
        btns = {"–ù–∞–∑–∞–¥": "back_to_access_manager"}
        await callback.message.answer(
            "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É",
            reply_markup=kb.get_callback_btns(btns=btns),
        )


@router.callback_query(F.data.startswith("access_remove_"))
async def remove_user_db(callback: types.CallbackQuery, state: FSMContext):
    db_id = int(callback.data.split("_")[-1])
    data = await state.get_data()
    tg_id = data.get("tg_id")
    db_list = data.get("db_list")
    btns = {"–ù–∞–∑–∞–¥": "back_to_access_manager"}
    
    if db_list:
        result = await rq.orm_remove_user_db(tg_id, db_list[db_id])

        if result:
            await callback.message.edit_text(
                "–î–æ—Å—Ç—É–ø –≤–∏–¥–∞–ª–µ–Ω–∏–π", reply_markup=kb.get_callback_btns(btns=btns)
            )
        else:
            await callback.message.edit_text(
                "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É",
                reply_markup=kb.get_callback_btns(btns=btns),
            )
    else:
        await callback.message.answer(
            "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É",
            reply_markup=kb.get_callback_btns(btns=btns),
        )


@router.message(F.text.lower() == '—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤')
async def users_info(message: types.Message):
    subs_info = await rq.orm_get_subscribers()

    for sub in subs_info:
        user = await rq.orm_get_user(sub.user_id)
        text = ''
        
        if sub.is_subscribed:
            text += f"@{user.name if user.name else '–ù–µ–º–∞—î —é–∑–µ—Ä–Ω–µ–π–º—É'} (<code>{user.tg_id}</code>)\n\n"
            text += f"üîë –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: {', '.join(user.key_list) if user.key_list else ''}\n"
            text += f"üìï –ü—ñ–¥–∫–ª—é—á–µ–Ω—ñ –±–∞–∑–∏: {', '.join(user.db_list) if user.db_list else ''}\n"
            text += f"‚úâ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {user.message_count}\n\n"
            text += f"üìÖ –ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤—ñ–¥ {sub.start_subscription_date.date()} –¥–æ {sub.end_subscription_date.date()}"

        await message.answer(text, reply_markup=kb.admin_menu)