import os

import app.keyboards.user_keyboard as kb

from aiogram import Router, types, F, Bot
from aiogram.filters import CommandStart, Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

import app.database.orm_query as rq

from app.filters.check_sub_user import IsSubUser
from app.filters.check_chat_type import ChatTypeFilter


load_dotenv()

router = Router()

public_router = Router()
public_router.message.filter(ChatTypeFilter(['private']))

private_router = Router()
private_router.message.filter(IsSubUser(), ChatTypeFilter(['private']))

KEY_WORDS = {
    '–ø–æ–ª—É—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø': 'üîë –ü–æ–ª—É—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø üîë',
}

class Feedback(StatesGroup):
    question = State()

#  /start
@public_router.message(CommandStart())
async def cmd_start(message: types.Message):
    if await IsSubUser().__call__(message):
        await message.answer('–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=kb.user_menu)
        return

    user = await rq.orm_get_user(str(message.from_user.id))

    if not user:
        await rq.orm_add_user(str(message.from_user.id), message.from_user.username)

    subscribe_kb = kb.get_keyboard(
        KEY_WORDS['–ø–æ–ª—É—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø'],
        placeholder='–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø, –Ω–∞–∂–º—ñ—Ç—å "–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø"',
    )

    await message.answer(
        '–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –ë—ñ–∑–Ω–µ—Å –†–∞–¥–∞—Ä –Ñ–≤—Ä–æ–ø–∞. –ú–æ—è –º—ñ—Å—ñ—è ‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º –ø—ñ–¥–ø—Ä–∏—î–º—Ü—è–º —à–≤–∏–¥–∫–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —Ä–æ–±–æ—Ç—É —Ç–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —É –Ñ–≤—Ä–æ–ø—ñ. –®—É–∫–∞—î—Ç–µ –Ω–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —á–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ñ–≤? –Ø –ø—ñ–¥–∫–ª—é—á—É –≤–∞—Å –¥–æ –≤–µ–ª–∏–∫–æ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó –≤ Telegram, —è–∫–∞ —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–±—É–≤–∞—î –≤ –Ñ–°. –Ø –∑–Ω–∞–π–¥—É –Ω–∞–π–∫—Ä–∞—â—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –≤–∞—Å. –ó—ñ –º–Ω–æ—é –≤–∞—à –±—ñ–∑–Ω–µ—Å –∑–∞–≤–∂–¥–∏ –Ω–∞ –∑–≤‚Äô—è–∑–∫—É –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏!',
        reply_markup=subscribe_kb)


# subscribe
@public_router.message(or_f(Command('subscribe'), KEY_WORDS['–ø–æ–ª—É—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø'] == F.text))
async def cmd_subcribe(message: types.Message):
    await message.answer(
        f'–¢–≤—ñ–π —Ç–µ–ª–µ–≥—Ä–∞–º ID: <code>{message.from_user.id}</code>\n\n–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø, –Ω–∞–ø–∏—à–∏ —Å—é–¥–∏\n üëâ @magisteroffski')


### MAIN MENU
@private_router.message(F.text == '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
async def main_menu(message: types.Message, state: FSMContext):
    await message.answer('–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –≤ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"', reply_markup=kb.user_menu)
    await state.clear()

### KEYWORDS
class KeywordsState(StatesGroup):
    add_keywords = State()
    remove_keywords = State()


# Add keywords
@private_router.message(F.text == "–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞")
async def keywords_menu(message: types.Message):
    await message.answer('–ú–µ–Ω—é "–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞"', reply_markup=kb.keywords)


# Keyword list
@private_router.message(F.text == "–°–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤")
async def keyword_list(message: types.Message):
    orm_keywords = await rq.orm_get_keywords(str(message.from_user.id))

    if orm_keywords:
        keywords_str = ', '.join(orm_keywords)
        await message.answer(f"–°–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤\n\n{keywords_str}")
    else:
        await message.answer('–ù–µ–º–∞—î –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤')


# Add keywords
@private_router.message(F.text == "–î–æ–¥–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞")
async def add_keywords(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É\n–ü—Ä–∏–∫–ª–∞–¥: –ö—ñ—Ç, —Å–æ–±–∞–∫–∞, –±–æ–±—Ä", reply_markup=kb.main)
    await state.set_state(KeywordsState.add_keywords)


@private_router.message(KeywordsState.add_keywords)
async def add_keywords_first_step(message: types.Message, state: FSMContext):
    await state.update_data(keywords=message.text)
    data = await state.get_data()
    keywords_list = [i.strip() for i in data.get("keywords").split(",")]
    result = await rq.orm_add_keywords(str(message.from_user.id), keywords_list)

    if result:
        await message.answer(
            "–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ñ", reply_markup=kb.keywords
        )
    else:
        await message.answer(
            "–¢–∞–∫–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –≤–∂–µ —î –≤ –±–∞–∑—ñ", reply_markup=kb.keywords
        )

    await state.clear()


# Remove keywords
@private_router.message(F.text == "–í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞")
async def remove_keywords(message: types.Message, state: FSMContext):
    await message.answer(
        "–©–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞, –≤–≤–µ–¥—ñ—Ç—å —ó—Ö —á–µ—Ä–µ–∑ –∫–æ–º—É\n–ü—Ä–∏–∫–ª–∞–¥: –ö—ñ—Ç, —Å–æ–±–∞–∫–∞, –±–æ–±—Ä",
        reply_markup=kb.main
    )
    await state.set_state(KeywordsState.remove_keywords)


@private_router.message(KeywordsState.remove_keywords)
async def remove_keywords_first_step(message: types.Message, state: FSMContext):
    await state.update_data(keywords=message.text)
    data = await state.get_data()
    keywords_list = [i.strip() for i in data.get("keywords").split(",")]
    result = await rq.orm_remove_keywords(str(message.from_user.id), keywords_list)

    if result:
        await message.answer("–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω—ñ", reply_markup=kb.keywords)
    else:
        await message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.", reply_markup=kb.keywords)
    await state.clear()

### Feedback
@private_router.message(F.text == "–ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
async def feedback(message: types.Message, state: FSMContext):
    await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —Å—é–¥–∏ —Å–≤–æ—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è üëá', reply_markup=kb.main)
    await state.set_state(Feedback.question)

@private_router.message(Feedback.question)
async def feedback_first(message: types.Message, state: FSMContext, bot: Bot):
    await state.update_data(question=message.text)
    data = await state.get_data()
    question = data.get("question")

    if question:
        await message.answer(f'<blockquote>{question}</blockquote>\n\n–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.', reply_markup=kb.user_menu)
        await bot.send_message(
            chat_id=os.getenv('CHAT_ID'),
            text=f'–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {f"@{message.from_user.username}" if message.from_user.username else "-"} (<code>{message.from_user.id}</code>)\n\n<blockquote>{question}</blockquote>\n\n<code>/answer {message.from_user.id} </code>',
        )
    else:
        await message.answer('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.', reply_markup=kb.user_menu)

    await state.clear()
router.include_router(public_router)
router.include_router(private_router)
